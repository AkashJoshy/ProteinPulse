<style>
  .active>.page-link,
  .page-link.active {
    background-color: #F46F36;
    border-color: black;
    color: white;
  }

  .form-control:focus {
    border-color: #c1c1c1;
    box-shadow: none;
    background-color: #f8f9fa;
  }
</style>

<div class=" mt-3 d-flex me-2 me-md-5">
  <h6 class="ms-auto px-2 py-1">Sort</h6>
  <select class="search-sort"
    style="border-radius: 10px; color: rgb(17, 17, 17) ;padding-left: 5px; border: 2px solid black;"
    aria-label="Default select example">
    <option selected disabled value="no-filter" class="text-secondary"> No Filter </option>
    <option value="lowToHigh">Low to High</option>
    <option value="highToLow">High to Low</option>
    <option value="ascending">Ascending</option>
    <option value="descending">Descending</option>
    <option value="averageRating">Average Rating</option>
    <option value="newArrivals">New Arrivals</option>
  </select>
</div>

<div class="d-flex justify-content-between">
  <h3 class="category-title ms-3 ms-md-5" style="cursor: pointer;">
    Products <a href="/admin/add-product" class="add-category px-3 rounded-3"
      style="text-decoration: none; margin-left: 7px; color: rgb(38, 185, 38); border: 0.1px solid rgb(0, 0, 0);">+</a>
  </h3>
  <div class="ms-auto mt-2 me-2">
    <input type="search" style="color: rgb(17, 17, 17) ;padding-left: 5px; border: 2px solid rgb(98, 97, 97);"
      placeholder="Search" id="search-bar" class="form-control">
  </div>
  <div class="btn btn-success me-3 me-md-5 mt-2 mb-2" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
    Add Stock
  </div>
</div>


<!-- Button trigger modal -->
<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
  aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header text-light" style="background-color: black; border-top: 5px solid #F46F36;">
        <h1 class="modal-title fs-5" id="staticBackdropLabel">Add Stock</h1>
        <button type="button" class="btn-close bg-light" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">

        {{!-- Form to update Stock --}}
        <form class="needs-validation" id="productUpateForm" novalidate>
          <div class="">
            <label for="productID" class="form-label">Product Name</label>
            <select name="productID" class="form-select" id="productID" required>
              <option selected disabled value="">Choose</option>
              {{#each products}}
              <option value="{{this._id}}"> {{this.name}} </option>
              {{/each}}
            </select>
            <div class="invalid-feedback">
              Please select any product
            </div>
          </div>
          <div class="">
            <label for="stock" class="form-label">Stock</label>
            <input name="stock" type="number" class="form-control" id="stock" min="1" max="100" required>
            <div class="invalid-feedback">
              Please enter the stock
            </div>
          </div>

          <div class="mt-4">
            <button type="submit" class="btn btn-success">Add</button>
          </div>
        </form>
        {{!-- --}}
      </div>
      {{!-- <div class="modal-footer"> --}}
        {{!-- </div> --}}
    </div>
  </div>
</div>



<div class="container table-responsive shadow-lg rounded">
  <table class="table mt-3">
    <thead class="table-dark">
      <tr>
        <th scope="col">NO</th>
        <th scope="col">Name</th>
        <th scope="col">Image</th>
        <th scope="col">Description</th>
        <th scope="col">Category</th>
        <th scope="col">Size</th>
        <th scope="col">Price</th>
        <th scope="col">Offer</th>
        <th scope="col">Flavour</th>
        <th scope="col">Rating</th>
        <th scope="col">Quantities</th>
        <th scope="col">Sales Price</th>
        <th scope="col">Origin</th>
        <th scope="col">Best Before</th>
        <th scope="col">Edit</th>
        <th scope="col">Delete</th>
      </tr>
    </thead>
    <tbody>
      {{#if (isEmpty products.length)}}
      {{#each products}}
      <tr>
        <th scope="row"> {{increment @index}} </th>
        <td> {{this.name}} </td>
        <td> <img src="/uploads/{{this.imageUrl.[0]}}" style="height: 100px;" alt=""> </td>
        <td>
          <div class="table-responsive" style="height: 100px; overflow-y: scroll;">
            {{this.description}}
          </div>
        </td>
        <td> {{this.categoryName}} </td>
        <td> {{this.size}} </td>
        <td> {{this.price}} </td>
        <td> {{this.offer}}% </td>
        <td> {{this.flavour}} </td>
        <td> {{this.rating}} </td>
        <td> {{this.quantities}} </td>
        <td> {{this.salePrice}} </td>
        <td> {{this.origin}} </td>
        <td> {{this.createdAt}} </td>

        <td>
          <a href="/admin/edit-product/{{this._id}}">
            <i class="fa-solid fa-pen" style="cursor: pointer; color: rgb(15, 223, 15);">
            </i>
          </a>
        </td>
        <td>
          <a class="btn-product-action" onclick="deleteproduct(`{{this._id}}`, 
        `{{this.name}}`, 
        `delete-product`, 
        `Delete`)">
            <i class="fa-solid fa-trash mx-auto px-3" style="cursor: pointer; color: red;"></i>
          </a>
        </td>
      </tr>
      {{/each}}
      {{else}}
    </tbody>
    <tr>
      <td colspan="16" class="fs-4 fw-semibold text-md-center text-danger">No Products Available</td>
    </tr>
    {{/if}}
  </table>

  <h4 class="fs-4 text-center text-danger fw-semibold" id="product-message"></h4>

  <nav aria-label="Page navigation example" class="d-flex fixed-bottom" id="pagination" style="z-index: 2;">
    <ul class="pagination mx-auto py-3 admin-pagination">
      {{#if pagination.previousPage}}
      <li class="page-item">
        <a class="page-link bg-dark prev-next-number"
          href="/admin/products?page={{paginationManipulation pagination.currentPage -1}}">Previous</a>
      </li>
      {{/if}}

      {{#each (paginationNumbers 1 pagination.totalPages) as |pageNumber| }}
      <li class="page-item">
        <a class="page-link page-number" href="/admin/products?page={{pageNumber}}">
          {{pageNumber}}
        </a>
      </li>
      {{/each}}

      {{#if pagination.nextPage}}
      <li class="page-item">
        <a class="page-link bg-dark prev-next-number"
          href="/admin/products?page={{paginationManipulation pagination.currentPage 1}}">Next</a>
      </li>
      {{/if}}

    </ul>
  </nav>

  <div>
    {{#if errMsg}}
    <input type="text" name="d-none err-message" value="{{errMsg}}">
    {{/if}}
  </div>

</div>

<script src="/javaScript/viewProducts.js"></script>

<script>

  // Function to update pagination
  function updatePagination(pagination, query = 'filters', search = '') {
    const paginationElement = document.querySelector('#pagination .pagination');
    let paginationHtml = '';


    // Previous Page Link
    if (pagination.previousPage) {
      paginationHtml += `
      <li class="page-item">
        <a class="page-link bg-dark prev-next-number" href="${query == 'search' ? `?search=${search}&page=${pagination.currentPage - 1}` : `?page=${pagination.currentPage - 1}&filter=${searchSort.value}`}">Previous</a>
      </li>
    `;
    }

    // Page Number Links
    for (let pageNumber = 1; pageNumber <= pagination.totalPages; pageNumber++) {
      paginationHtml += `
      <li class="page-item ${pagination.currentPage === pageNumber ? 'active' : ''}">
        <a class="page-link page-number" href="${query == 'search' ? `?search=${search}&page=${pageNumber}` : `?page=${pageNumber}&filter=${searchSort.value}`}">
          ${pageNumber}
        </a>
      </li>
    `;
    }

    // Next Page Link
    if (pagination.nextPage) {
      if (query == 'search') {
        console.log(`Search is ...`)
      }
      paginationHtml += `
      <li class="page-item">
        <a class="page-link bg-dark prev-next-number" href="${query == 'search' ? `?search=${search}&page=${pagination.currentPage + 1}` : `?page=${pagination.currentPage + 1}&filter=${searchSort.value}`}">Next</a>
      </li>
    `;
    }

    paginationElement.innerHTML = paginationHtml;
  }

  // Deleting a Product or restoring it
  function deleteproduct(productID, productName, productRoute, productAction) {
    Swal.fire({
      title: 'Are you sure?',
      text: `Do you want to ${productAction} ${productName} ?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#2196F3',
      confirmButtonText: `Yes, ${productAction} it!`,
      cancelButtonText: 'No, cancel!',
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: `/admin/${productRoute}`,
          method: "DELETE",
          data: { productID },
          success: response => {
            if (response.status) {
              if (response.islessPrice) {
                Swal.fire(response.message)
                return
              }
              Swal.fire(`Successfully ${productAction}d ${productName}`)
                .then(() => window.location.href = response.redirected);
            } else {
              window.location.href = response.redirected;
            }
          }
        });
      }
    });
  }

  // Sorting
  const searchSort = document.querySelector('.search-sort');

  function fetchProducts(filter, page) {
    $.ajax({
      url: `/admin/products/sort`,
      method: 'GET',
      data: { filter, page },
      success: response => {
        if (response.status) {
          let products = response.products;
          let html = '';
          products.forEach((product, index) => {
            html += `
              <tr>
                <th scope="row"> ${index + 1} </th>
                <td> ${product.name} </td>
                <td> <img src="/uploads/${product.imageUrl[0]}"  style="height: 100px;" alt=""> </td>
                <td>
                  <div class="table-responsive" style="height: 100px; overflow-y: scroll;">
                    ${product.description}
                  </div>
                </td>
                <td> ${product.categoryName} </td>
                <td> ${product.size} </td>
                <td> ${product.price} </td>
                <td> ${product.offer}% </td>
                <td> ${product.flavour} </td>
                <td> ${product.rating} </td>
                <td> ${product.quantities} </td>
                <td> ${product.salePrice} </td>
                <td> ${product.origin} </td>
                <td> ${product.bestBefore} </td>
                <td>
                  <a href="/admin/edit-product/${product._id}">
                      <i class="fa-solid fa-pen" style="cursor: pointer; color: rgb(15, 223, 15);"></i>
                  </a>
                </td>
                <td>
                  ${product.isActive ? `
                  <a class="btn-product-action"
                    onclick="deleteproduct('${product._id}', 
                    '${product.name}', 
                    'delete-product', 
                    'Delete')">
                      <i class="fa-solid fa-trash mx-auto px-3" style="cursor: pointer; color: red;"></i>
                  </a>`
                : `
                  <a class="btn btn-sm btn-outline-dark btn-product-action" 
                    onclick="deleteproduct('${product._id}', 
                    '${product.name}', 
                    'restore-product', 
                    'Restore')">
                      RESTORE
                  </a>`
              }
                </td>
              </tr>
            `;
          });

          document.querySelector('table tbody').innerHTML = html;
          updatePagination(response.pagination);
        }
      }
    });
  }

  // Filter change - fixed as always page number 1
  searchSort.addEventListener('change', (e) => {
    const filter = e.target.value;
    const page = 1;
    fetchProducts(filter, page);
  });


  document.addEventListener('DOMContentLoaded', (e) => {
    const urlParams = new URLSearchParams(window.location.search);
    const search = urlParams.get('search') || ''
    const filter = urlParams.get('filter') || 'no-filter';
    const page = urlParams.get('page') || 1;
    console.log(`search is ${search}`)
    if (search) {
      searchBar.value = search
      searchProducts(search, page)
    } else {
      searchSort.value = filter;
      fetchProducts(filter, page,);
    }

  });

  // Search Fn
  function searchProducts(search, page) {
    $.ajax({
      url: `/admin/products/query?search=${search}&page=${page}`,
      method: 'GET',
      success: response => {
        if (response.status) {
          if (response.pagination) {
            let products = response.products

            let html = ``
            products.forEach((product, index) => {
              html +=
                `
                <tr>
                <th scope="row"> ${index + 1} </th>
                <td> ${product.name} </td>
                <td> <img src="/uploads/${product.imageUrl[0]}"  style="height: 100px;" alt=""> </td>
                <td>
                  <div class="table-responsive" style="height: 100px; overflow-y: scroll;">
                    ${product.description}
                  </div>
                </td>
                <td> ${product.categoryName} </td>
                <td> ${product.size} </td>
                <td> ${product.price} </td>
                <td> ${product.offer}% </td>
                <td> ${product.flavour} </td>
                <td> ${product.rating} </td>
                <td> ${product.quantities} </td>
                <td> ${product.salePrice} </td>
                <td> ${product.origin} </td>
                <td> ${product.bestBefore} </td>
                <td>
                  <a href="/admin/edit-product/${product._id}">
                      <i class="fa-solid fa-pen" style="cursor: pointer; color: rgb(15, 223, 15);"></i>
                  </a>
                </td>
                <td>
                  ${product.isActive ? `
                  <a class="btn-product-action"
                    onclick="deleteproduct('${product._id}', 
                    '${product.name}', 
                    'delete-product', 
                    'Delete')">
                      <i class="fa-solid fa-trash mx-auto px-3" style="cursor: pointer; color: red;"></i>
                  </a>`
                  : `
                  <a class="btn btn-sm btn-outline-dark btn-product-action" 
                    onclick="deleteproduct('${product._id}', 
                    '${product.name}', 
                    'restore-product', 
                    'Restore')">
                      RESTORE
                  </a>`
                }
                </td>
              </tr>
              `
            })

            document.querySelector('table tbody').innerHTML = html;
            document.querySelector('#product-message').innerHTML = ``;
            updatePagination(response.pagination, 'search', search)
          } else {
            document.querySelector('table tbody').innerHTML = ``;
            document.querySelector('#product-message').innerHTML = `No Products Available`;
            document.querySelector('.admin-pagination').innerHTML = ``;

          }
        } else {
          window.location.href = response.redirected
        }
      }
    })
  }


  const searchBar = document.querySelector('#search-bar')
  let search

  searchBar.addEventListener('input', (e) => {
    e.preventDefault();
    search = e.target.value
    let searchParams = new URLSearchParams(window.location.search)
    console.log(searchParams)
    let page = searchParams.get('page') || 1
    window.location.href
    searchProducts(search, page)
  })

  const errorMessage = document.querySelector('.err-message')
  if (errorMessage) {
    Swal.fire(errorMessage.value)
  }

</script>