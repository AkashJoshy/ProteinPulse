<style>
  .invalid-feedback {
    display: none;
  }

  #confirmPassword,
  #newPassword {
    position: relative;
    top: -15%;
  }

  .new-password-msg,
  .confirm-password-msg {
    margin-top: -10px;
  }
</style>


<div class="container mt-5 ">
  <div class="col-md-12">
    <h2 class="pt-5 ms-md-5">CHANGE PASSWORD </h2>
    <div class="">
      <form action="/update-password" method="post"
        class="w-75 mx-auto mt-4 shadow-lg p-3 mb-5 rounded needs-validation" novalidate>
        <div class="col-md-12 col-lg-12 mt-4">
          <input type="hidden" name="_method" value="put">
          <label for="newPassword" class="form-label">NEW PASSWORD</label>
          <div class="d-flex">
            <input type="password" name="newPassword" class="form-control passwords new-password password-value"
              id="newPassword" minlength="8" placeholder="Enter New Password" required>
            <div class="toggle-password toggle-icon">
              <i class="fa-solid fa-eye ms-3 mt-2"></i>
            </div>

          </div>
          <div class="valid-feedback new-password-msg">
            Looks Ok
          </div>
          <div class="invalid-feedback new-password-msg">
            Please enter more than 8 letters
          </div>
        </div>

        <div class="col-md-12 col-lg-12 mt-3">
          <label for="confirmPassword" class="form-label ">CONFIRM PASSWORD</label>
          <div class="d-flex">
            <input type="password" name="confirmPassword" class="form-control confirm-password passwords password-value"
              id="confirmPassword" minlength="8" placeholder="Re-enter Your New Password" required>
            <div class="toggle-password toggle-icon">
              <i class="fa-solid fa-eye ms-3 mt-2"></i>
            </div>

          </div>
          <div class="valid-feedback confirm-password-msg">
            Looks Ok
          </div>
          <div class="invalid-feedback confirm-password-msg">
            Please enter more than 8 letters
          </div>
        </div>
        {{#if user}}
        <div class="mb-3 d-none">
          <label for="exampleInputPassword1" class="form-label">userID</label>
          <input type="password" value="{{user._id}}" name="userID" class="form-control" id="userID">
        </div>
        {{/if}}

        <button type="submit" style="background-color: #F46F36; "
          class="btn d-flex mx-auto mt-3 text-dark">SEND</button>
      </form>

    </div>
  </div>
</div>



<script>
  (() => {
    'use strict';

    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    const forms = document.querySelectorAll('.needs-validation');

    // Loop over them and prevent submission
    Array.from(forms).forEach(form => {
      form.addEventListener('submit', event => {
        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
        }

        form.classList.add('was-validated');
      }, false);
    });
  })();

  const passwordInput = document.querySelector('.new-password')
  const confirmPasswordInput = document.querySelector('.confirm-password')
  const invalidMessage = document.querySelector('.invalid-feedback')

  // Event Listener
  // Password
  passwordInput.addEventListener('input', () => {
    checkMaxLength(passwordInput)
    trimWhiteSpaces(passwordInput)
    validatePasswordMatch()
  })

  // Confirm Password
  confirmPasswordInput.addEventListener('input', () => {
    checkMaxLength(confirmPasswordInput)
    trimWhiteSpaces(confirmPasswordInput)
    validatePasswordMatch()
  })

  // Check Max Length
  function checkMaxLength(input) {
    if (input.value.length < 8) {
      invalidMessage.textContent = "Minimum 8 Letters"
      input.setCustomValidity('Minimum 8 letters');
    } else {
      invalidMessage.textContent = ""
      input.setCustomValidity('');
    }
  }

  // Trim WhiteSpaces
  function trimWhiteSpaces(input) {
    input.value = input.value.trim()
  }

  // validate the password and confirm password
  function validatePasswordMatch() {
    const passwordValue = passwordInput.value;
    const confirmPasswordValue = confirmPasswordInput.value;

    if (passwordValue !== confirmPasswordValue) {
      confirmPasswordInput.setCustomValidity('Passwords must match');
    } else {
      confirmPasswordInput.setCustomValidity('');
    }
  }

  // Password Icon
  const toggleIcons = document.querySelectorAll('.toggle-icon')
  const passwordValues = document.querySelectorAll('.password-value')

  document.addEventListener('DOMContentLoaded', () => {
    let clicked = false;

    // Password Input Toggle
    toggleIcons.forEach((icon, index) => {
      icon.style.color = "grey"
      icon.addEventListener('click', () => {
        if (clicked) {
          passwordValues[index].type = "password"
          clicked = false
          icon.style.color = "grey"
        } else {
          passwordValues[index].type = "text"
          clicked = true
          icon.style.color = "black"
        }
      })
    })
  })




</script>